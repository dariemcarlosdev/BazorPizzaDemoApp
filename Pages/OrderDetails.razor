@* Restrict the route parameter to the correct data type *@
@page "/myorders/{orderId:int}"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@implements IDisposable
@inject IJSRuntime JavaScript
<TopBar/>

<div class="main">
    @if (invalidOrder)
    {
        <h2>Order not found</h2>
        <p>We're sorry but this order no longer exists.</p>
    }
    else if (orderWithStatus == null)
    {
        <div class="track-order">
            <div class="track-order-title">
                <h2>
                    <text>Loading...</text>
                </h2>
                <p class="ml-auto mb-0">
                    ...
                </p>
            </div>
        </div>
    }
    else
    {
        <div class="track-order">
            <div class="track-order-title">
                <h2>
                    Order placed @orderWithStatus.Order.CreatedTime.ToLongDateString()
                </h2>
                <p class="ml-auto mb-0">
                    Status: <strong>@orderWithStatus.StatusText</strong>
                </p>
            </div>
            <div class="track-order-body">
                <!--Add a spinner to the page to give the customer feedback that the page is updating
                    An animated red dot appears while the order is incomplete and disappears when the status shows Delivered.
                -->
                <div class="track-order-details">
                    @if (IsOrderIncomplete)
                    {
                        <div class="spinner-grow text-danger float-right" role="status">
                            <span class="sr-only">Checking your order status...</span>
                        </div>
                    }
                    @foreach (var pizza in orderWithStatus.Order.Pizzas)
                    {
                        <p>
                            <strong>
                                @(pizza.Size)"
                                @pizza.Special.Name
                                (£@pizza.GetFormattedTotalPrice())
                            </strong>
                        </p>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    //Router parameter
    [Parameter] public int orderId { get; set; }
    OrderWithStatus orderWithStatus;
    bool invalidOrder = false;

    //Members for customer feedback about order status processing time.
    bool IsOrderIncomplete => orderWithStatus is null || orderWithStatus.IsDelivered == false;
    PeriodicTimer periodicTimer = new(TimeSpan.FromSeconds(3));

    /// <summary>
    /// The OnParametersSetAsync is a lifecycle method that is called after the parameters are set or when they are changed. 
    /// This method is useful for performing operations based on the parameters. For instance, you can compute any property or field that bases its value on the parameters. 
    /// If an incomplete Task is returned from OnParametersSetAsync, the Task is awaited and then the component is re-rendered.
    /// this method calls GetLatestOrderStatusUpdatesAsync
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        // try
        // {
        //     await JavaScript.InvokeVoidAsync("console.log", "GetLaterstOrderStatusUpdateAsync method get called.");
        //     orderWithStatus = await HttpClient.GetFromJsonAsync<OrderWithStatus>(
        //     $"{NavigationManager.BaseUri}orders/{orderId}");
        // }
        // catch (Exception e)
        // {
        //     invalidOrder = true;
        //     Console.Error.WriteLine(e);
        // }
        await JavaScript.InvokeVoidAsync("console.log", "OnParametersSetAzync lifecycle method invoked.");        
        await GetLaterstOrderStatusUpdateAsync();
    }

    async Task GetLaterstOrderStatusUpdateAsync()
    {
        try
        {
            await JavaScript.InvokeVoidAsync("console.log", "GetLaterstOrderStatusUpdateAsync method get called.");
            orderWithStatus = await HttpClient.GetFromJsonAsync<OrderWithStatus>(
            $"{NavigationManager.BaseUri}orders/{orderId}");
        }
        catch (Exception e)
        {
            invalidOrder = true;
            Console.Error.WriteLine(e);
        }
    }


    /// <summary>
    /// The OnAfterRenderAsync method is another lifecycle method in Blazor. It is called after the component has finished rendering.
    ///  This method is useful for performing operations that require the component to be rendered first, such as JavaScript interop calls.
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns
    protected override Task OnAfterRenderAsync(bool firstRender)
    //The OrderDetail component starts polling after the page renders thru this method, and stops polling when the order is delivered.
    {
        JavaScript.InvokeVoidAsync("console.log", "OnAfterRenderAsync lifecycle method invoked.");
        return firstRender ? StartPollingTimerAsync() : Task.CompletedTask;

    }


    async Task StartPollingTimerAsync()
    {
        //While the order status is incomplete, the StartPollingTimerAsync function uses a PeriodicTimer to asynchronously wait for the next tick.
        while (IsOrderIncomplete && await periodicTimer.WaitForNextTickAsync())
        {
            await GetLaterstOrderStatusUpdateAsync();
            //to notify the component state has changes.
            StateHasChanged();
        }
    }

    public void Dispose() => periodicTimer.Dispose();
}
