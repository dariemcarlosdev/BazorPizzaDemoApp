@page "/Checkout"
@using BlazingPizzaNavigation.Services
@inject OrderStateService OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<TopBar/>

<div class="main">
    <!-- 

     An EditForm has three events that run when it is submitted (you can not set they all at time):
    (basic validation at the individual input field level.)

    OnValidSubmit: This event fires when the user submits a form and their input passes validation.
    OnInvalidSubmit: This event fires when the user submits a form and their input fails validation.
    
    Note:If you use OnValidSubmit and OnInvalidSubmit instead, you don't have to check the validation state within each event.
    
    ( more complex validation requirements, such as cross-checking one input field against another to ensure a valid combination of values,)
    
    OnSubmit: This event fires whenever the user submits a form, regardless of the results of validation.
    
    Note:if you use OnSubmit, the other two events OnValidSubmit,OnInvalidSubmit won't fire and you need to check validation state.
    
    <EditForm Model="Order.DeliveryAddress" OnSubmit="CheckSubmission"> 
    removing OnSubmit="CheckSubmission" to make available Field validation and Model validation
    
    --->
@*     <EditForm Model="Order.DeliveryAddress" OnSubmit=@HandleSubmission> *@
    <EditForm Model="Order.DeliveryAddress"  OnValidSubmit=@OnValidPlacerOrder OnInvalidSubmit=@OnInvalidShowError>
    <div class="checkout-cols">
        <div class="checkout-order-details">
            <h4>Review order</h4>
            <OrderReview Order="Order" />
        </div>
        <div class="checkout-delivery-address">
            <h4>Deliver to...</h4>
            @* Adding error message *@
            @if (isError)
                {
                    <div class="alert alert-danger ">Please, correct the errors before submit the form.</div>
                }
            <AddressEditor Address="Order.DeliveryAddress" />
        </div>
    </div>
    @* Modify the button element with to call a PlaceOrder method. Add the @onclick and disabled attributes as show *@

   @* Removing @onCLick event from  <button class="checkout-button btn btn-warning" @onclick="PlaceOrder" disabled=@isSubmitting> *@
            <button class="checkout-button btn btn-warning" disabled=@isSubmitting>
        Place order
    </button>
        <ValidationSummary />
        <DataAnnotationsValidator />
    </EditForm>
</div>

@code {
    Order Order => OrderState.Order;
    bool isSubmitting = false;
    bool isError;
    public async Task PlaceOrder()
    {
        isError = false;
        isSubmitting = true;
        @* The preceding code will disable the Place order button, post JSON that will be added to pizza.db, clear the order, and use NavigationManager to redirect customers to the home page. *@
        //isSubmitting = true;
        var response = await HttpClient.PostAsJsonAsync(
            $"{NavigationManager.BaseUri}orders", OrderState.Order);
        int newOrderId = await response.Content.ReadFromJsonAsync<int>();
        OrderState.ResetOrder();
        // NavigationManager.NavigateTo("/myorders");
        NavigationManager.NavigateTo($"myorders/{newOrderId}");
    }

    /// <summary>
    ///  (note being Used)Code to handle the form submission with OnSubmit event.
    /// </summary>
    /// <returns></returns>
    public async Task CheckSubmission(EditContext editContext)
    {
        isSubmitting = true;

        //
        var deliveryAddress = editContext.Model as Address;
        isError = string.IsNullOrWhiteSpace(deliveryAddress?.Name)
            || string.IsNullOrWhiteSpace(deliveryAddress?.Line1)
            || string.IsNullOrWhiteSpace(deliveryAddress?.PostalCode);

        if (!isError)
        {
            await PlaceOrder();
        }

        isSubmitting = false;

    }
    /// <summary>
    ///  (note being Used)In the above code, HandleSubmission is triggered when the form is submitted and is valid.
    ///  //The Model parameter of the EditForm component is the model instance that the form is bound to.
    /// </summary>
    /// <param name="editContext"></param>
    void HandleSubmission(EditContext editContext)
    {
        //cheking the validation state within each event.
        // checks if the form is valid based on the defined data annotations and validation rules. If the form is valid, it will print “onSumission event fired.” to the console.

        if (editContext.Validate())
        {

            Console.WriteLine("onSumission event fired.");
        };
    }


    void OnValidPlacerOrder(EditContext context)
    {
        Console.WriteLine("OnValid event is fired and order placer.");
        // Store valid data here
        PlaceOrder();
    }

    void OnInvalidShowError(EditContext context)    {
    
        Console.WriteLine("OnInvalidSubmit event is fired, nada need to be corrected.");
        // Take action here to help the user correct the issues
        isError = true;
    }

}
