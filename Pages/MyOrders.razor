@page "/MyOrders"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JavaScript
@using BlazorPizzaDemoApp.Components
@* <TopBar/> *@

<div class="main">
    @if (orderWithStatuses == null)
    {
        <text>Loading...</text>
    }
    else if (!orderWithStatuses.Any())
    {
        <h2>No orders placed</h2>
        <a class="btn btn-success" href="/">Order some pizza</a>
    }
    else
    {
        /*
        <div class="list-group orders-list">
            @foreach (var orderWithStatus in orderWithStatuses)
            {
                <div class="list-group-item">
                    <div class="col">
                        <h5>@orderWithStatus.Order.CreatedTime.ToLongDateString()</h5>
                        Items:
                        <strong>@orderWithStatus.Order.Pizzas.Count()</strong>;
                        Total price:
                        <strong>£@orderWithStatus.Order.GetFormattedTotalPrice()</strong>
                    </div>
                    <div class="col">
                        Status: <strong>@orderWithStatus.StatusText</strong>
                    </div>
                    @if (@orderWithStatus.StatusText != "Delivered")
                    {
                        <div class="col flex-grow-0">
                            @* Updating Trank order button aiming to route to the component OrderDetails"*@
                            @* <a href="myorders/" class="btn btn-success"> *@
                            <a href="myorders/@orderWithStatus.Order.OrderId" class="btn btn-success">
                                Track &gt;
                            </a>
                        </div>
                    }
                </div>
            }
        </div>
        */

        <!---
            The code now relies on the PaginationComponent,
            providing the generic type of OrderWithStatus, a list of past orders sorted by their creation date, 
            and a function to generate the label for each item. The ItemContent render fragment defines the markup for each item.
        -->
        <TemplatedPaginationComponent TItem="OrderWithStatus"
                             Items="orderWithStatuses.OrderBy(o => o.Order.CreatedTime).ToList()"
                             ItemLabel='item => new($"{item.Order.CreatedTime:ddd, MMM. d, yyyy}")'>
            <ItemContentTemplate>
                <div class="list-group-item bg-secondary text-white">
                    <div class="col">
                        <h5>@($"{context.Order.CreatedTime:dddd, MMMM d, yyyy hh:mm tt}")</h5>
                        Items:
                        <strong>@context.Order.Pizzas.Count</strong>
                    </div>
                    <div class="col">
                        Status: <strong>@context.StatusText</strong>
                    </div>
                    @if (@context.StatusText != "Delivered")
                    {
                        <div class="col flex-grow-0">
                            <a href="myorders/@context.Order.OrderId" class="btn btn-success">
                                Track &gt;
                            </a>
                        </div>
                    }
                </div>
                <div class="list-group-item">
                    <div class="col">
                        <OrderReview Order="@context.Order" />
                    </div>
                </div>
            </ItemContentTemplate>
        </TemplatedPaginationComponent>

    }
</div>

@code{


    List<OrderWithStatus> orderWithStatuses = [];

    /// <summary>
    /// Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties.
    /// Component-lifecycle: This method will be executed immediately after OnInitializedAsync if this is a new instance of a component.
    /// If it is an existing component that is being re-rendered because its parent is re-rendering then the OnInitialized* methods will not be executed,
    /// and this method will be executed immediately after SetParametersAsync instead.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnParametersSetAsync()
    {
        await JavaScript.InvokeVoidAsync("console.log", "Rendering Parent Component MyOrders.razor");
        orderWithStatuses = await HttpClient.GetFromJsonAsync<List<OrderWithStatus>>($"{NavigationManager.BaseUri}orders");

    }
}

