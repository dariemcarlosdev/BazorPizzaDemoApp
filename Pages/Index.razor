<!--this is home.razor component, is had been called Index.razor.We can identify this file as a page due to the presence of the page "/" directive on the first line-->
@page "/"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject OrderStateService OrderStateService
@layout CurrentMainLayout
@inject IJSRuntime JavaScript

@* Indexrazor Parent Component ->
                Childs Component:
                ConfigurePizzaDialog.razor *@

@* Use a layout in a Blazor component *@
@* @layout BlazzingPizzaMainLayout Moved to _Imports.razor file*@ 

@* add the top-bar html. Commented since it was already applied thru Layout definition *@
@* <TopBar></TopBar> *@

<!--Add a modal component librery to the opening page of this application-->
<div class="main">
    <Modal Title="My first Modal dialog" Show="true">
        <p>
        This is my first modal dialog
        </p>
    </Modal>
    @* also delete the old <h1>Blazing Pizzas</h1> element. It's no longer needed because we have a top bar in the layout. *@
  @* <h1>Blazing Pizzas</h1> *@
  <ul class="pizza-cards">
    @if (specials != null)
    {
      @foreach (var special in specials)
      {
          <li @onclick="@(() => OrderStateService.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
          <div class="pizza-info">
          <span class="title">@special.Name</span>
          @special.Description
          <span class="price">@special.GetFormattedBasePrice()</span>
          </div>
        </li>
      }
    }
  </ul>
</div>

@if (OrderStateService.ShowingConfigureDialog)
{
    //Parent-child component relationship: Index(Parent Compnt) -> ConfigurePizzaDialog(Child Compnt)
    //Index Component create an instance of ConfigurePizzaDialog Component.
    
    // CancelConfigurePizzaDialog() method is assigned to OnCancelEvent EventCallback<string> of ConfigurePizzaDialog Child Compnt.
    // so when the button in ConfigurePizzaDialog ChildComponent is clicked, the CancelConfigurePizzaDialog() method in the Index ParentComponent gets executed,
    // and the string 'Order Cancelled.' is outputted.

 
    //Same for OnConfirmEvent EventCallback but in this case we are not passing any value through.
    <ConfigurePizzaDialog
      Pizza="OrderStateService.ConfiguringPizza"
      OnCancelEvent="OrderStateService.CancelConfigurePizzaDialog"
      OnConfirmEvent="OrderStateService.ConfirmConfigurePizzaDialog" />
}

<div class="sidebar">
    @if (order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in order.Pizzas)
            {
              <div class="cart-item">
                    <!--replacing onclick event for removing pizza that call OrderState.RemoveConfiguredPizza(configuredPizza)) method-->
                    <!--a @onclick="@(() => OrderStateService.RemoveConfiguredPizza(configuredPizza))" class="delete-item">❌</a>-->
                    <button type="button" class="close text-danger" aria-label="Close"
                            @onclick="@(async () => await RemovePizzaConfirmationMsg(configuredPizza))">
                        <span aria-hidden="true">&times;</span>
                    </button>
                  <div class="title">@(configuredPizza.Size)" @configuredPizza.Special.Name</div>
                  <div class="item-price">
                      @configuredPizza.GetFormattedTotalPrice()
                  </div>
              </div>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <a href="checkout" class="@(OrderStateService.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Order >
        </a>
    </div>
</div>

@code {
    List<PizzaSpecial> specials = [];
    Order order => OrderStateService.Order;

    // Occurs when the component is ready to start.Event handler method as asynchronous to combat thread get blocked by long-running task operation
    protected override async Task OnInitializedAsync()
    {
        // await operator inside the event handler method to initiate a long-running tasks like GetFromJsonAsync() on a separate thread and free the current thread for other work
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>(NavigationManager.BaseUri + "specials");
    }

    public async Task RemovePizzaConfirmationMsg(Pizza removePizza)
    {
        var messageParams = new
        {
            title = "Remove Pizza?",
            Text = $"""Do you want to remove the "{removePizza.Special!.Name}" from your order?""",
            icon = "warning",
            buttons = new
            {
                abort = new { text = "No, leave it in my order", value = false },
                confirm = new { text = "Yes, remove pizza", value = true }
            },
            danger = true
        };

        //The server uses the IJSRuntime.InvokeAsync method to call the confirm function on the client side, the response is a bool value.
        if (await JavaScript.InvokeAsync<bool>("swal", messageParams))
        {
            OrderStateService.RemoveConfiguredPizza(removePizza);
        }
    
    }
}
		