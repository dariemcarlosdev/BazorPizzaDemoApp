@page "/"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject OrderStateService OrderState
@layout CurrentMainLayout
@* Use a layout in a Blazor component *@
@* @layout BlazzingPizzaMainLayout Moved to _Imports.razor file*@ 

@* add the top-bar html. Commented since it was already applied thru Layout definition *@
@* <TopBar></TopBar> *@

<div class="main">
    @* also delete the old <h1>Blazing Pizzas</h1> element. It's no longer needed because we have a top bar in the layout. *@
  @* <h1>Blazing Pizzas</h1> *@
  <ul class="pizza-cards">
    @if (specials != null)
    {
      @foreach (var special in specials)
      {
          <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
          <div class="pizza-info">
          <span class="title">@special.Name</span>
          @special.Description
          <span class="price">@special.GetFormattedBasePrice()</span>
          </div>
        </li>
      }
    }
  </ul>
</div>

@if (OrderState.ShowingConfigureDialog)
{
    //Parent-child component relationship: Index(Parent Compnt) -> ConfigurePizzaDialog(Child Compnt)
    <ConfigurePizzaDialog
      Pizza="OrderState.ConfiguringPizza"
      OnCancel="OrderState.CancelConfigurePizzaDialog"
      OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
}

<div class="sidebar">
    @if (order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in order.Pizzas)
            {
              <div class="cart-item">
                  <a @onclick="@(() => OrderState.RemoveConfiguredPizza(configuredPizza))" class="delete-item">x</a>
                  <div class="title">@(configuredPizza.Size)" @configuredPizza.Special.Name</div>
                  <div class="item-price">
                      @configuredPizza.GetFormattedTotalPrice()
                  </div>
              </div>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <a href="checkout" class="@(OrderState.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Order >
        </a>
    </div>
</div>

@code {
  List<PizzaSpecial> specials = [];
  Order order => OrderState.Order;

   // event handler method as asynchronous to combat thread get blocked by long-running task operation
  protected override async Task OnInitializedAsync()
  {
       // await operator inside the event handler method to initiate a long-running tasks like GetFromJsonAsync() on a separate thread and free the current thread for other work
      specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>(NavigationManager.BaseUri + "specials");
  }
}
		